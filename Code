//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////	San Jose State University																    //////
//////	EE120 - Lab 7 - Student Template															//////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//////	Task 1:																					    //////
//////	1-  Finish writing the UartInit() function.												    //////
//////  2-	Finish writing the write() function.												//////
//////	3-  Insert your code to read from the keypad, convert to an ASCII character array and pass  //////
//////	the array to the write() function.															//////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
//Include header files for all drivers
#include <asf.h>
void Simple_Clk_Init(void);
void Power_Clk_Init(void);
void PortInit(void);		// Enable Peripheral Multiplexing (PMUX) for SERCOM4 at PA10/11
void UartInit(void);		// Finish setting the initialization values
void write(char *text);		// Finish writing this function definition
void display(int n);
bool debounce();
void wait(int);
volatile int count =0;
int num=0;
int main(void)
{
	
	Simple_Clk_Init();
	Power_Clk_Init();
	PortInit();
	UartInit();
	Port *ports = PORT_INSTS;
	PortGroup *porA = &(ports->Group[0]);
	PortGroup *porB = &(ports->Group[1]);
	porA->DIRSET.reg = PORT_PA07 | PORT_PA06 | PORT_PA05 | PORT_PA04;
	porB->DIRSET.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB06 | PORT_PB03 | PORT_PB01 | PORT_PB04;
	porA->OUTSET.reg = PORT_PA07 | PORT_PA06 | PORT_PA05 | PORT_PA04;
	porB->OUTSET.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB06 | PORT_PB03 | PORT_PB01 | PORT_PB04;
	
	uint row[4]={PORT_PA04, PORT_PA05, PORT_PA06, PORT_PA07};
	int	 pow[4]={0};
	
	int i=0;
	int temp;
	while(1)
	{
			
		temp=num;
		//This for loop seperates the digits from the counter number
		
		for(int x=0;x<4;x++)
		{
			pow[x]=temp%10;
			temp/=10;
		}
		
		porA->OUTSET.reg = PORT_PA07 | PORT_PA06 | PORT_PA05 | PORT_PA04;		//turn off all LEDs
		display(pow[i]);														//Change the numbers displayed(not actually displayed yet)
		porA->OUTCLR.reg = row[i];												//turn on the LED that needs to be displayed
		i++;
		
		if(i>3)
		i=0;
	}
}
void SERCOM4_Handler()
{
	if(SERCOM4->USART.INTFLAG.bit.RXC==1)
	{
		int che=(SERCOM4->USART.DATA.bit.DATA);
		if(che>=0x30 | che<=0x39)
			num=num*10+(che-48);
	}
	//SERCOM4->USART.INTENCLR.bit.RXC=1;
}
void wait(int t)
{
	count = 0;
	while (count < t*1000)
	{
		count++;
	}
}
bool debounce()
{
	Port *ports = PORT_INSTS;
	
	// Set the group's offset for the structure PortGroup in this case it is for group[0] or groupA
	// Group A offset of 0x00				// Group B offset of 0x80
	PortGroup *porA = &(ports->Group[0]);
	PortGroup *porB = &(ports->Group[1]);
	    int state = 0;
	    int counter = 0;
	    while (1){
		    switch(state){
			    case 0:
			    if(porA->IN.reg )
			    {
				    state++;
			    }
			    else
				{
				return 0;
				}
				break;
			    case 1:
			    if(porA->IN.reg)
			    {
				    state++;
			    }
			    else
				{
			    state=0;
				return 0;
				}
			    break;
			    case 2:
			    if(porA->IN.reg )
			    {
				    state++;
			    }
			    else
				{
			    state=0;
				return 0;
				}
				break;
			    case 3:
				if(porA->IN.reg)
				{
			    state=1;
				count++;
				}
				else return 0;
			    break;
				}
				if(count>8000)
				{
					count=0;
					return 1;
				}
				
		    }
		
}
void display(int n){
	//		Display function
	//		Display a number on SSD depending on the input 0-9
	/////////////////////////////////////////////////////////////
	
Port *ports = PORT_INSTS;
// Set the group's offset for the structure PortGroup in this case it is for group[0] or groupA
// Group A offset of 0x00				// Group B offset of 0x80
PortGroup *porB = &(ports->Group[1]);
PortGroup *porA = &(ports->Group[0]);
	switch(n)
	{
		case 0:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB03 | PORT_PB01 | PORT_PB04;
		porB->OUTSET.reg = PORT_PB06;
		break;
		case 1:
		porB->OUTCLR.reg = PORT_PB02 | PORT_PB01;
		porB->OUTSET.reg = PORT_PB06 | PORT_PB00 | PORT_PB05 | PORT_PB03 | PORT_PB04;
		break;
		case 2:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB06 | PORT_PB03 | PORT_PB01 | PORT_PB04;
		porB->OUTSET.reg = PORT_PB05 | PORT_PB02;
		break;
		case 3:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB06 | PORT_PB03 | PORT_PB01 | PORT_PB02;
		porB->OUTSET.reg = PORT_PB05 | PORT_PB04;
		break;
		case 4:
		porB->OUTCLR.reg = PORT_PB01 | PORT_PB02 | PORT_PB05 | PORT_PB06 ;
		porB->OUTSET.reg = PORT_PB00 | PORT_PB03 | PORT_PB04;
		break;
		case 5:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB03 | PORT_PB06 ;
		porB->OUTSET.reg = PORT_PB01 | PORT_PB04;
		break;
		case 6:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB03 | PORT_PB06 | PORT_PB04;
		porB->OUTSET.reg = PORT_PB01;
		break;
		case 7:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB01 ;
		porB->OUTSET.reg = PORT_PB06 | PORT_PB05 | PORT_PB03 | PORT_PB04;
		break;
		case 8:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB03 | PORT_PB01 | PORT_PB04 | PORT_PB06;
		break;
		case 9:
		porB->OUTCLR.reg = PORT_PB00 | PORT_PB02 | PORT_PB05 | PORT_PB01 | PORT_PB06 ;
		porB->OUTSET.reg = PORT_PB03 | PORT_PB04;
		break;
	}
}
// Power & GCLK management
void Power_Clk_Init(void){
	
	PM->APBCMASK.reg |= 0x1u << 6; // enable SERCOM4
	
	uint32_t temp = 0x11; // set SERCOM ID for sercom4 Table 15-5 (Page 120)
	temp |= 0<<8;
	GCLK->CLKCTRL.reg=temp; // write ID to generic clock
	GCLK->CLKCTRL.reg |= 0x1u << 14;    // enable it.
	
}
// Port initialization
void PortInit(void)
{
	Port *por = PORT_INSTS;
	PortGroup *porB = &(por->Group[1]);
	
	// Setup Port 10 and 11 for SERCOM4
	// Enable PMUX with the PINCFG register
	porB->PINCFG[10].bit.PMUXEN = 1; //use the appropriate formula for ODD and EVEN pins to get the value required
	porB->PINCFG[11].bit.PMUXEN = 1;
	
	// Enable Peripheral function group for SERCOM4 on PA10/11
	porB->PMUX[5].bit.PMUXE = 3; //Table 7-1 (Page 27) & Page 345
	porB->PMUX[5].bit.PMUXO = 3; //Table 7-1 (Page 27) & Page 345
}
// SERCOM4 UART initialization
void UartInit(void){
	
	Sercom *ser = SERCOM4;
	SercomUsart *uart = &(ser->USART);
	
	uart->CTRLA.bit.MODE = 1;	// UART mode with internal clock
	uart->CTRLA.bit.CMODE = 0;	// Communication mode 1 = synchronous, 0 = asynchronous
	uart->CTRLA.bit.RXPO = 0x3; // Making pad[3] (PB11) the receive data pin
	uart->CTRLA.bit.TXPO = 0x1; // Making pad[2] (PB10) the transmit data pin
	
	/*
	Set the CTRLB Character Size to 8 bits (Page 393)
	*/
	// Enter code here
	uart->CTRLB.bit.CHSIZE=0;
	
	uart->CTRLA.bit.DORD = 0x1; // Data order set which bit is sent first LSB = 1, MSB = 0
	
	/*
	Set the CTRLB Stop Bit to one stop bit (Page 393)
	*/
	// Enter code here
	uart->CTRLB.bit.SBMODE=0;
	uart->CTRLB.bit.SFDE = 0x1; // Start of Frame Detection Enabled
	
	/*
	Program the BAUD register to a reasonable baud rate that can be selected from the Termite software (Page 396)
	*/
	// Enter code here
	uart->BAUD.reg=64277;
	while(uart->STATUS.bit.SYNCBUSY == 1){}
	
	uart->CTRLB.bit.RXEN = 1;	// Receiver enabled (Page 392)
	uart->CTRLB.bit.TXEN = 1;	// Transmitter enabled (Page 392)
	
	while(uart->STATUS.bit.SYNCBUSY == 1){}
	
	uart->CTRLA.reg |= 0x2; // Enable the UART peripheral 
	NVIC->ISER[0] = 1<<11;
	ser->USART.INTENSET.bit.RXC=1;
}
// Write text to data reg
void write(char *text)
{
	Sercom *ser = SERCOM4;
	SercomUsart *uart = &(ser->USART);
	
	char *textPtr;
	textPtr = text;
	
	while(*textPtr)
	{
		while(!(uart->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE)){
			
		}
		uart->DATA.bit.DATA=*textPtr;
			textPtr++;
		/*
		
		
		
		Write code to set the uart->DATA.reg to each pointer value of textPtr.
		You will need to iterate through the character array pointer at each cycle. (Page 404)
		
		
		
		*/
		while(!(uart->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)){}
	}
}
		
// Simple clock initialization	*Do Not Modify*
void Simple_Clk_Init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
			SYSCTRL_INTFLAG_DFLLRDY;
			
	//system_flash_set_waitstates(0);  //Clock_flash wait state =0
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;      /* for OSC8M initialization  */
	temp.bit.PRESC    = 0;    // no divide, i.e., set clock=8Mhz  (see page 170)
	temp.bit.ONDEMAND = 1;    //  On-demand is true
	temp.bit.RUNSTDBY = 0;    //  Standby is false
	
	SYSCTRL->OSC8M = temp;
	SYSCTRL->OSC8M.reg |= 0x1u << 1;  //SYSCTRL_OSC8M_ENABLE bit = bit-1 (page 170)
	
	PM->CPUSEL.reg = (uint32_t)0;		// CPU and BUS clocks Divide by 1  (see page 110)
	PM->APBASEL.reg = (uint32_t)0;		// APBA clock 0= Divide by 1  (see page 110)
	PM->APBBSEL.reg = (uint32_t)0;		// APBB clock 0= Divide by 1  (see page 110)
	PM->APBCSEL.reg = (uint32_t)0;		// APBB clock 0= Divide by 1  (see page 110)
	PM->APBAMASK.reg |= 01u<<3;   // Enable Generic clock controller clock (page 127)
	/* Software reset Generic clock to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = 0x1u << 0;   // Reset gen. clock (see page 94)
	while (GCLK->CTRL.reg & 0x1u ) {  /* Wait for reset to complete */ }
	
	// Initialization and enable generic clock #0
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){}
	*((uint8_t*)&GCLK->GENDIV.reg) = 0;  // Select GCLK0 (page 104, Table 14-10)
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){}
	GCLK->GENDIV.reg  = 0x0100;   		 // Divide by 1 for GCLK #0 (page 104)
	while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){}
	GCLK->GENCTRL.reg = 0x030600;  		 // GCLK#0 enable, Source=6(OSC8M), IDC=1 (page 101)
}
